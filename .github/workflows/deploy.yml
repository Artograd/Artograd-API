# This GitHub Actions workflow runs on every push to the master branch of the
# repository, and deploys a full containerized application on AWS.
#
# First, the workflow deploys AWS infrastructure resources from AWS
# CloudFormation templates, including a public load balancer and container
# image repository.
#
# Then, the workflow builds and deploys the Docker image for one or more
# microservices, using a CloudFormation template to deploy the image to an
# Amazon ECS service.

on:
  push:
    branches:
      - deploy2

name: Deploy

jobs:
  
  
  # Build and deploy a Docker image to an ECS service through CloudFormation.
  #
  # This job can be copied multiple times to deploy different microservices
  # within the same application. For example, if there is another Dockerfile
  # for another microservice in a 'backend-service' folder in the repository,
  # another job named 'deploy-backend-service' can be added to this workflow
  # which builds that Dockerfile and deploys the image to a 'backend-service'
  # ECS service in a separate CloudFormation stack.
#  build-and-upload:
#    name: Build and upload application to S3 bucket
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Set up JDK
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'adopt'
#          java-version: '21'
#
#      - name: Build SpringBoot JAR
#        run: |
#          mvn clean install -DskipTests
#
#      - name: Upload to S3
#        uses: jakejarvis/s3-sync-action@master
#        with:
#          args: --follow-symlinks --delete --exclude '*' --include 'target/*.zip'
#        env:
#          AWS_S3_BUCKET: artograd-api-bucket
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-central-1
#        if: success()
#
#  deploy-lambda:
#    name: Deploy lambda function
#    runs-on: ubuntu-latest
#    needs: build-and-upload
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Configure environment name
#        id: env-name
#        env:
#          REPO: ${{ github.repository }}
#        run: |
#          ENVIRONMENT=`echo $REPO | tr "/" "-"`
#          echo "Environment name: $ENVIRONMENT"
#          echo "::set-output name=environment::$ENVIRONMENT"
#
#      - name: Configure AWS credentials
#        id: creds
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-central-1
#
#      - name: Deploy lambda function
#        id: deploy-lambda-function
#        uses: aws-actions/aws-cloudformation-github-deploy@v1
#        with:
#          name: ${{ steps.env-name.outputs.environment }}-lambda
#          template: cloudformation/lambda.yaml
#          role-arn: arn:aws:iam::${{ steps.creds.outputs.aws-account-id }}:role/github-actions-cloudformation-stack-role
#          no-fail-on-empty-changeset: "1"

  deploy-API:
    name: Deploy API for lambda
    runs-on: ubuntu-latest
#    needs: deploy-lambda
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure environment name
        id: env-name
        env:
          REPO: ${{ github.repository }}
        run: |
          ENVIRONMENT=`echo $REPO | tr "/" "-"`
          echo "Environment name: $ENVIRONMENT"
          echo "::set-output name=environment::$ENVIRONMENT"

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Deploy API
        id: deploy-api
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ steps.env-name.outputs.environment }}-api
          template: cloudformation/api.yaml
          role-arn: arn:aws:iam::${{ steps.creds.outputs.aws-account-id }}:role/github-actions-cloudformation-stack-role
          no-fail-on-empty-changeset: "1"